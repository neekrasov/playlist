# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import song_pb2 as song__pb2


class SongStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSong = channel.unary_unary(
            "/Song/CreateSong",
            request_serializer=song__pb2.CreateSongRequest.SerializeToString,
            response_deserializer=song__pb2.CreateSongResponse.FromString,
        )
        self.DeleteSong = channel.unary_unary(
            "/Song/DeleteSong",
            request_serializer=song__pb2.DeleteSongRequest.SerializeToString,
            response_deserializer=song__pb2.DeleteSongResponse.FromString,
        )
        self.GetSong = channel.unary_unary(
            "/Song/GetSong",
            request_serializer=song__pb2.GetSongRequest.SerializeToString,
            response_deserializer=song__pb2.GetSongResponse.FromString,
        )
        self.UpdateSong = channel.unary_unary(
            "/Song/UpdateSong",
            request_serializer=song__pb2.UpdateSongRequest.SerializeToString,
            response_deserializer=song__pb2.UpdateSongResponse.FromString,
        )


class SongServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateSong(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteSong(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetSong(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateSong(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_SongServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateSong": grpc.unary_unary_rpc_method_handler(
            servicer.CreateSong,
            request_deserializer=song__pb2.CreateSongRequest.FromString,
            response_serializer=song__pb2.CreateSongResponse.SerializeToString,
        ),
        "DeleteSong": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteSong,
            request_deserializer=song__pb2.DeleteSongRequest.FromString,
            response_serializer=song__pb2.DeleteSongResponse.SerializeToString,
        ),
        "GetSong": grpc.unary_unary_rpc_method_handler(
            servicer.GetSong,
            request_deserializer=song__pb2.GetSongRequest.FromString,
            response_serializer=song__pb2.GetSongResponse.SerializeToString,
        ),
        "UpdateSong": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateSong,
            request_deserializer=song__pb2.UpdateSongRequest.FromString,
            response_serializer=song__pb2.UpdateSongResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "Song", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Song(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateSong(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Song/CreateSong",
            song__pb2.CreateSongRequest.SerializeToString,
            song__pb2.CreateSongResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeleteSong(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Song/DeleteSong",
            song__pb2.DeleteSongRequest.SerializeToString,
            song__pb2.DeleteSongResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetSong(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Song/GetSong",
            song__pb2.GetSongRequest.SerializeToString,
            song__pb2.GetSongResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateSong(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Song/UpdateSong",
            song__pb2.UpdateSongRequest.SerializeToString,
            song__pb2.UpdateSongResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
